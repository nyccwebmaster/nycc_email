<?php
function nycc_email_menu() {
	$items = array();

  	$items['admin/settings/nycc_email'] = array(
    	'title' => 'NYCC Email',
    	'page callback' => 'drupal_get_form',
    	'page arguments' => array('nycc_email_admin_settings'),
    	'access arguments' => array('administer nycc_email'),
    	'description' => 'configure inbound nycc email',
    	'file' => 'nycc_email.admin.inc',
    	'type' => MENU_NORMAL_ITEM,
  	);

    $items['nycc/inbound'] = array(
    	'title' => t('NYCC Inbound Email'),
    	'description' => t('Inbound email'),
      	'type' => MENU_CALLBACK,
      	'page callback' => 'nycc_email_inbound_callback',
      	'access callback' => TRUE,
    );  
    $items['nycc/group_email'] = array(
    	'title' => t('NYCC Group Email'),
    	'description' => t('Group email'),
      	'type' => MENU_CALLBACK,
      	'page callback' => 'nycc_email_group_email_callback',
      	'access callback' => TRUE,
    );      
	return $items;
}


function nycc_email_perm() {
	return array('administer nycc_email', 'approve rides by email' );
} 



function nycc_email_group_email_callback() {
	if (variable_get('nycc_email_debug_to_log', '') == 1)
		$email_debug = true;
	else
		$email_debug = false;
	
//	if ($email_debug ) watchdog('nycc_email', 'processing inbound group email callback', array(), WATCHDOG_NOTICE) ;

	if(_nycc_email_isValid_signature('nycc/group_email', $_POST)) {
		//iterate through the messages
    	foreach (json_decode($_POST['mandrill_events']) as $event) {

	    	$args = nycc_email_get_msg_details($event);
	    	//watchdog("nycc_email", '<pre>' . print_r( $event, true) . '</pre>'); 
	    	
	    	if ($args['to_mail'] != $args['from_email']) {
	    		$user = user_load(array('mail'=> $args['from_email'])); 

	    		if(!empty($user)) {
					if ($email_debug ) watchdog('nycc_email', 'messages recieved from <a href="/user/@username">@username</a>', array('@username'=> $user->name), WATCHDOG_NOTICE) ;
			

					$gid = nycc_email_get_group_by_email($args['to_mail']);
					if (isset($gid)){
						//watchdog("nycc_email", '<pre>' . print_r( $args, true) . '</pre>'); 
						if ($email_debug ) watchdog('nycc_email', 'message sent to group: @grp_email', array('@grp_email'=> $args['to_mail']), WATCHDOG_NOTICE) ;
						
						if(nycc_email_is_member_of_group($gid, $user->uid)){
							
							if ($email_debug ) watchdog('nycc_email', '<pre><a href="/user/@username">@username</a> is member or captain of group <a href="/node/@grp_id">@grp_id</a>. Processing email', 
														array('@username'=> $user->name, '@grp_id'=> $gid), WATCHDOG_NOTICE) ;
							
							$send_to = nycc_email_get_group_member_emails($gid, $args['to_cc_list']);
							$send_to[] = array(
								'email' => $args['to_mail'],
								'name' => $args['to_mail'],
								'type' => 'to'
							);
							nycc_email_send_mandrill_email(
														$to = $send_to, 
														$from_addr = $args['to_mail'], 
														$from_name = $args['from_name'] . ' (via ' . variable_get('nycc_email_signing_domain', '') .')',
														$reply_to = $args['from_email'],
														$subject = $args['subject'], 
														$body = $args['html'], 
														$attachments = $args['attachments']
							);
							
						} else {
							if ($email_debug ) watchdog('nycc_email', 'Dicarding message. <a href="/user/@username">@username</a> is not member of group with address: @grp_email.', 
													array('@grp_email'=> $args['to_mail'], '@username'=> $user->name), WATCHDOG_WARNING) ;
							nycc_email_send_msg($args['from_email'], 
								variable_get('smtp_from', ''), 
								"Unable to process your Group Email sent to: " . $args['to_mail'] ,
								"Hello, We are unable to process your request to email this group because you are not an active member. If you feel you're receiving this message in error, please contact the group captain."
							);							
						}// end if sender is member
					} else {
						if ($email_debug ) watchdog('nycc_email', 'Dicarding message. Could not find group with email address: @grp_email', 
													array('@grp_email'=> $args['to_mail']), WATCHDOG_WARNING) ;
													
							nycc_email_send_msg($args['from_email'], 
								variable_get('smtp_from', ''), 
								"Unable to process your Group Email sent to: " . $args['to_mail'] ,
								"Hello, We are unable to process your request to email this group because we could not find a group with that email address. If you feel you're receiving this message in error, please contact the group captain."
							);								
					} // end if group is found
	    		} else {
	    			if ($email_debug ) watchdog('nycc_email', 'Dicarding message. Could not find user with email address: @user_email.' , 
	    									array('@user_email'=>$args['from_email']), WATCHDOG_WARNING) ;
	    									
							nycc_email_send_msg($args['from_email'], 
								variable_get('smtp_from', ''), 
								"Unable to process your Group Email sent to: " . $args['to_mail'] ,
								"Hello, We are unable to process your request to email this group because you are not an active NYCC member. If you feel you're receiving this message in error, please contact the group captain."
							);			    			
	    		}//end if could not load user
	    	} else { 
	    		if ($email_debug ) watchdog('nycc_email', 'Dicarding message. sender is same as recipient: @user_email to @grp_email.', 
	    								array('@user_email'=>$args['from_email'], '@grp_email'=> $args['to_mail']), WATCHDOG_NOTICE) ;

	    	}//end if isn't loopback
    	} // end for each
    } // end if signature is valid
}

function nycc_email_form_alter(&$form, $form_state, $form_id)  {
	//adds validation to group node form
	if ($form_id == 'group_node_form') {
		$form['#validate'][] = 'nycc_email_email_check_validate';
 	}
}
 

function nycc_email_email_check_validate ($form, &$form_state)  {
	//Validation logic for group email address
	//Confirms that the domain portion of the email address matches the specified domain suffix
	//Also checks email address to ensure it's structurally valid
	if( strlen(trim($form_state['values']['field_group_email_alias'][0]['value'])) != 0) {

		$mail = explode('@', $form_state['values']['field_group_email_alias'][0]['value']);
		if( strtolower( trim($mail[1]) != strtolower(trim(variable_get('nycc_email_group_domain_suffix', ''))))) 
		{
			form_set_error('field_group_email_alias', 'Email addresses must end in ' . variable_get('nycc_email_group_domain_suffix' , '') 
									. '. Please visit <a href="' . url('/admin/settings/nycc_email', array('absolute' => TRUE)) 
									. '" target="_blank">Settings Page</a> to confirm your domain settings.');
									
		}		
		if ( ! valid_email_address( $form_state['values']['field_group_email_alias'][0]['value'])) {
			form_set_error('field_group_email_alias', $form_state['values']['field_group_email_alias'][0]['value'] 
			. " is not valid. Please enter a valid e-mail address.");
		}
	} 
}

function nycc_email_get_msg_details($event = null) {
	//Parses the event for relevant fields
	if (isset($event)) {
		return array(
			'from_email' => $event->msg->from_email ?: '',
			'from_name' => $event->msg->from_name ?: '',
			'to_mail' => $event->msg->email ?: '',
			'to_cc_list' => _nycc_email_get_recipients($event->msg) ?: '',			
			'subject' => $event->msg->subject ?: '',
			'html' => $event->msg->html ?: '',
			'text' => array('value' => $event->msg->text ?: '', ),			
			'raw_msg' => array('value' => $event->msg->raw_msg ?: '', ),
			'attachments' => $event->msg->attachments ?: '',
		);
	}
}

function _nycc_email_get_recipients ($msg = null) {
	//takes to & CC list and combines them into a single array of email recipient email addresses. 
	//This is used to ensure recipients already getting the message because they're on the to or CC list are not added to the email again
	$recipients = array();
	if (isset($msg)) {
		if (!empty($msg->to)){
			foreach($msg->to as $to) {
				$recipients[] = strtolower($to[0]);
			}
		}
		if (!empty($msg->cc)){
			foreach($msg->cc as $cc) {
				$recipients[] = strtolower($cc[0]);
			}
		}
	} 
	return $recipients;
}


function nycc_email_get_group_by_email($grp_email = null) {
	//returns the group ID of a selected group if the email_alias matches the passed email address
	if(isset($grp_email)) {
		$sql = "select n.nid as gid from content_type_group g join node n on n.nid=g.nid and n.vid=g.vid WHERE g.field_group_email_alias_value='@s'";
  		$r = db_fetch_object(db_query($sql, trim($grp_email)));
  		watchdog("nycc_email", 'GRoups: ' . $sql); 
		if( is_numeric($r->gid)) {
	  		if ($email_debug ) watchdog('nycc_email', 'nycc_email_get_Group_by_email found group <a href="/node/@grp_id">@grp_id</a> with email address of @grp_email.' , 
	  							array('@grp_id'=>$r->gid, '@grp_email'=>$grp_email), WATCHDOG_NOTICE) ;
  			return $r->gid;
  		} else {
	  		watchdog('nycc_email', 'nycc_email_get_Group_by_email could not find group with email address of: @grp_email.' , 
	  					array('@grp_email'=>$grp_email), WATCHDOG_NOTICE) ;
	  		return null;
  		}
  	} else {
	  	return null;
	}
}

function nycc_email_is_member_of_group($gid, $uid) {
	//checks to see if user is member of specified group
  	$sql = "select uid from {og_uid} where nid=@d and uid=@d and is_active=1";

  	$r = db_fetch_object(db_query($sql, $gid, $uid));
	if(is_numeric($r->uid) ) {
		return true;
	} else {
		return false;
	}
}

function nycc_email_get_group_member_emails($gid=null, $recipients = array()) {
	if (isset($gid)){
		$emails = array();
		$sql = <<<EOS
select u.mail, cp.field_first_name_value, cp.field_last_name_value 
from og_uid o 
join users u on o.uid=u.uid 
join node n on n.uid=u.uid
join content_type_profile cp on n.nid=cp.nid and n.vid=cp.vid
where o.is_active=1 and o.nid=@d
EOS;
		$q = db_query($sql, $gid);

//		watchdog('nycc_email', 'nycc_email_get_group_member_emails sql  returned ' . db_affected_rows() . ' members of group with id ' . $gid, array(), WATCHDOG_NOTICE) ;
		while ($records = db_fetch_array($q)) {
			if(!in_array(strtolower($records['mail']), $recipients)) {
				$emails[] = array(
					'email' => $records['mail'],
					'name' => $records['field_first_name_value'] . ' ' . $records['field_last_name_value'],
					'type' => 'bcc'
				);
            } else {
            	//watchdog('nycc_email', 'nycc_email_get_group_member_emails - skipping ' . $records['mail'] . ' because it was in the recipient list', array(), WATCHDOG_NOTICE) ;
            }
		}
    	return $emails;
	}
}

function nycc_email_inbound_callback() {
	if (variable_get('nycc_email_debug_to_log', '') == 1)
		$email_debug = true;
	else
		$email_debug = false;
  	
  	// Check signature.
//  	$msg_count = 0; // for debugging
	if ($email_debug ) watchdog('nycc_email', "new message routed to /nycc/inbound", array(), WATCHDOG_NOTICE) ;
	if(_nycc_email_isValid_signature('nycc/inbound', $_POST)) {
		//iterate through the messages
    	foreach (json_decode($_POST['mandrill_events']) as $event) {
//  		$msg_count ++;
//    		watchdog('nycc_email', 'Msg # ' . $msg_count . ': <pre>' . print_r( $event->msg, TRUE) . '</pre>');
	    	$args = nycc_email_get_msg_details($event);
    	  	$token = _nycc_email_parse_email($args['to_mail']);
      	
      		if ($email_debug ) watchdog('nycc_email', "Ride Token is @token." , array('@token'=>$token), WATCHDOG_NOTICE) ;
			$ride = nycc_email_get_ride_from_token($token);

			if (isset($ride)) {
				if ($email_debug ) watchdog('nycc_email', 'Ride found is: <a href="/node/@rid">@title</a>', 
									array('@rid'=>$ride->nid, '@title'=>$ride->title), WATCHDOG_NOTICE) ;

				if(nycc_email_can_approve_rides($args['from_email'])) {
					$ride_status = $ride->field_ride_status[0]['value'];
					if ($email_debug ) watchdog('nycc_email', 'Ride Status for Ride: <a href="/node/@rid">@title</a> is @status',  
											array('@rid'=>$ride->nid, '@status'=>$ride_status, '@title'=>$ride->title), WATCHDOG_NOTICE) ;	

					if($ride_status == 'Revised' || $ride_status == 'Submitted') {
						if ($email_debug ) watchdog('nycc_email', 'Ride:  <a href="/node/@rid">@title</a> needs approval', 
											array('@rid'=>$ride->nid , '@title'=>$ride->title), WATCHDOG_NOTICE) ;

						if (_nycc_email_has_approval($args['text']['value'])) {
						    $ride->field_ride_status[0]['value'] = "Approved";
						    $ride->field_ride_additional_dates[0]['value'] = "";
						    node_save($ride);

							watchdog('nycc_email', 'Ride:  <a href="/node/@rid">@rid</a> is Approved via email by: @from', 
										array('@rid'=>$ride->nid, '@from'=>$args['from_email']), WATCHDOG_NOTICE) ;

							nycc_email_send_msg($args['from_email'], 
								'webmaster@nycc.org', 
								"NYCC Ride: " . $ride->title . " is approved" ,
								"Hello, The ride listed above has been approved by you via email."
							);
						    

						} else { //is not approval
//							watchdog('nycc_email', '<pre>' .print_r( $event->msg, TRUE) . '</pre>');
							watchdog('nycc_email', 'message is ' . $args['text']['value'] , array(), WATCHDOG_NOTICE) ;
							if ($email_debug ) watchdog('nycc_email', 'Not Approving ride:  <a href="/node/@rid">@rid</a> . Start of Message is: @msg', 
												array('@rid'=>$ride->nid, '@msg'=>strtolower(substr(ltrim($args['text']['value']),0,7))), WATCHDOG_NOTICE) ;
												
							nycc_email_send_msg($args['from_email'], 
								'webmaster@nycc.org', 
								"NYCC Ride: " . $ride->title . " will not be approved" ,
								"Hello, The ride listed above will not be approved because we did not see the word Approved at the start of your reply. If you feel that this is a error, please email the NYCC Webmaster"
							);
						} //end if should be approved
					} else { //if ride isn't in a submitted or revised state
						if ($email_debug ) watchdog('nycc_email', 'Skipping approval of ride:  <a href="/node/@rid">@rid</a> because it is already approved', 
											array('@rid'=>$ride->nid), WATCHDOG_WARNING) ;
							nycc_email_send_msg($args['from_email'], 
								'webmaster@nycc.org', 
								"NYCC Ride: " . $ride->title . " was not be approved" ,
								"Hello, The ride listed above was not approved because the status is not Submitted or Revised. If you feel that this is a error, please email the NYCC Webmaster"
							);		
					} // end if ride is revised
				} else { //can not approve
					watchdog('nycc_email', 'Unauthorised approval attempt from @from' , array('@from'=>$args['from_email']), WATCHDOG_ERROR) ;
					nycc_email_send_msg($args['from_email'], 
						'webmaster@nycc.org', 
						"Unable to process ride approval for Ride: " . $ride->title ,
						"Hello, We are unable to process your request to approve a ride because it was sent from an unauthorised email address. If you feel that this is a error, please email the NYCC Webmaster"
					);
					
				} // end if can approve
			} else { //unable to load ride from token
				watchdog('nycc_email', 'Unable to load ride from token: @token', array('@token'=>$token), WATCHDOG_ERROR) ;
				nycc_email_send_msg($args['from_email'], 
					'webmaster@nycc.org', 
					"Unable to process ride approval.",
					"Hello, We are unable to process your request to approve a ride because the ride could not be found. If you feel that this is a error, please email the NYCC Webmaster"
				);
			} //end if ride is loaded
		}//end for each
//		if ($email_debug ) watchdog('nycc_email', 'All messages processes. Total Messages: @count' , array('@count'=>$msg_count), WATCHDOG_NOTICE) ;
		
  	}  else { // if email signature isn't valid.
    watchdog('nycc_email', 'Failed signature validation calculated="@calculated", received="@received",
    md5(mandrill_events)="@md5", strlen(mandrill_events)=@length, post=<pre>@post</pre>', array(
      '@calculated' => print_r($calculated_signatures, TRUE),
      '@received' => $_SERVER['HTTP_X_MANDRILL_SIGNATURE'],
      '@length' => strlen($_POST['mandrill_events']),
      '@md5' => md5($_POST['mandrill_events']),
      '@post' => print_r($_POST, TRUE),
    ), WATCHDOG_WARNING);
  } //end if valid signature
}


function _nycc_email_has_approval($text) {
	//checks to see if the email body starts with the word approve
	return strtolower(substr(ltrim($text),0,7)) == 'approve' ;
}



function nycc_email_send_msg($to, $from, $subject, $body) {
	//sends email using native drupal capabilities
	if ($email_debug ) watchdog('nycc_email', 'nycc_email_send_msg called', array(), WATCHDOG_NOTICE) ;
	$headers = array(
		'MIME-Version' => '1.0',
		'Content-Type' => 'text/plain; charset=UTF-8; format=flowed; delsp=yes',
		'Content-Transfer-Encoding' => '8Bit',
		'X-Mailer' => 'Drupal',
	);
	$msg = array(
			'id' => 'test_test',
			'from' => $from,
			'to' => $to,
			'subject' => $subject,
			'body' => $body,
			'headers' => $headers,
		);
	//watchdog('nycc_email', '<pre>' .print_r( $msg, TRUE) . '</pre>');		
	drupal_mail_send($msg);
} 

function nycc_email_can_approve_rides($sender='') {
	//checks to see if the sender's email address is associated with a ride coordinator or if it has the approve rides by email permission.
	$approvers = array("a-rides@nycc.org",  "b-rides@nycc.org",  "c-rides@nycc.org",  "vp-rides@nycc.org");
// 	$sql = "select u.mail from users u  inner join users_roles ur on u.uid=ur.uid inner join role r on r.rid=ur.rid WHERE r.name in ('vp of rides', 'ride coordinator')";
// 	$q = db_query($sql);
//   	while ($records = db_fetch_array($q)) {
//     	$approvers[] = $records['mail'];
//   	}

  	if(in_array($sender, $approvers)) {
		return true;	//return true because use has role or email was received from a ride coordinator email account.
  	} else {
  		//attempt to load user from email address and check permissions.
	  	return user_access('approve rides by email', user_load(array('mail'=> $sender)));  	
  	}
}



function nycc_email_get_ride_from_token($token='') {
	//searches for a ride based on the token provided.
	//returns the ride object or null/false if nothing was found
	if (empty($token)) {
    	return FALSE;
  	}
	$sql = "select n.nid, r.field_ride_status_value from {node} n inner join {content_type_rides} r on n.nid=r.nid and n.vid=r.vid WHERE r.field_ride_token_value = '" . $token. "' limit 1";
	$q = db_query($sql);
	$r = db_fetch_object($q);
//	dpm($r);
	if (is_numeric($r->nid)) {
		if ($email_debug ) watchdog('nycc_email', 'Token: @token returned ride: <a href="/node/@rid">@rid</a>', 
						array('@token'=>$token, '@rid'=>$r->nid), WATCHDOG_NOTICE) ;	
		return node_load(array('nid' => $r->nid));
	} else {
		if ($email_debug ) watchdog('nycc_email', 'Ride could not be found for Token: @token ', array('@token'=>$token), WATCHDOG_NOTICE) ;	
	}
}


function nycc_email_nycc_email_alter(&$args) {
  // Cleanup message bellow.

  // Delete signature.
  $text = explode('--', $args['text']['value']);
  $text = $text[0];

  // Delete quotes.
  $args['text']['value'] = preg_replace("/(?<=^|\n)>.*\r?\n|\r?\n>.*/", '', $text);
}



function _nycc_email_parse_email($email = '') {
	//returns the username portion of an email address
  	$mail = explode('@', $email);
  	return $mail[0] ?: '' ;
}


function _nycc_email_isValid_signature($urlSuffix='', $_POST=''){
	//compares mandrill signature in the inbound event against the authorized signatures provided by Mandrill for a given dns domain
	if(!empty($urlSuffix) && !empty($_POST)) {
		$url = url($urlSuffix, array('absolute' => TRUE));	
		try {
			foreach (nycc_email_mandrill_get_api_object()->request('webhooks/list') as $list) {
				if (($url == $list['url']) 
					&& (_nycc_email_generate_signature($url, $list['auth_key'], $_POST) == $_SERVER['HTTP_X_MANDRILL_SIGNATURE']))
				{
					return true;
				}
			}
		} catch (Mandrill_Exception $e) {
			watchdog('nycc_email', "_nycc_email_isValid_signature generated exception: " . $e->getMessage(), array('url' => $url,'_POST' => $_POST),  WATCHDOG_WARNING) ;	
			return false;
		}
	} else {
		watchdog('nycc_email', "_nycc_email_isValid_signature. recieved invalid parameters " , array('url' => $url,'_POST' => $_POST),  WATCHDOG_WARNING) ;	
		return false;
	}
}


function _nycc_email_generate_signature($url, $webhook_key, $params) {
/**
 * Generates a base64-encoded signature for a Mandrill webhook request.
 * Verbatim from http://help.mandrill.com/entries/23704122-Authenticating-webhook-requests
 *
 * @param string $url the webhook url
 * @param string $webhook_key the webhook's authentication key
 * @param array $params the request's POST parameters
 *
 * @return string
 */
	$signed_data = $url;
  	ksort($params);
  	foreach ($params as $key => $value) {
    	$signed_data .= $key;
    	$signed_data .= $value;
  	}
  	return base64_encode(hash_hmac('sha1', $signed_data, $webhook_key, TRUE));
}



function nycc_email_mandrill_get_api_object($key='') {
	//returns API object if authentication key is valid
	if (empty($key)) {
		$api_key = variable_get('nycc_email_mandrill_api_key', '');
	} else {
		$api_key = $key;
	}
	if (empty($api_key)) {
		//drupal_set_message("Please specify a valid API key.");
		watchdog('nycc_email', "nycc_email_mandrill_get_api_object: Unable to connect to Mandrill. API KEY is empty", array(),  WATCHDOG_WARNING) ;	
  	}
  	try {
	  	require_once('mandrill.class.php');
		$m = new Mandrill($api_key, 60);
		if (isset($m)) {
			if ($email_debug ) watchdog('nycc_email', 'Successfully connected to Mandrill', array(), WATCHDOG_NOTICE) ;	
			return $m;
		} else {
			watchdog('nycc_email', "nycc_email_mandrill_get_api_object: Unable to connect to Mandrill", array(), WATCHDOG_WARNING) ;	
  			throw $e;  		
		}  	
  	} catch(Mandrill_Exception $e) {
  		watchdog('nycc_email', "nycc_email_mandrill_get_api_object: Unable to connect to Mandrill: " . $e->getMessage(), array(), WATCHDOG_WARNING) ;
  		throw $e;	
  	}
}

function random_text( $type = 'alnum', $length = 60 )
{
	//function to generate random strongs using some combination of characters and length
	switch ( $type ) {
		case 'all':
			$pool = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$@^&*()_+-|}{][;:,<.>?';
			break;
		case 'alnum':
			$pool = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
			break;
		case 'alpha':
			$pool = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
			break;
		case 'hexdec':
			$pool = '0123456789abcdef';
			break;
		case 'numeric':
			$pool = '0123456789';
			break;
		case 'nozero':
			$pool = '123456789';
			break;
		case 'distinct':
			$pool = '2345679ACDEFHJKLMNPRSTUVWXYZ';
			break;
		case 'email':
			$pool = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$@&*+-=?^_{|}~';
			break;									

		default:
			$pool = (string) $type;
			break;
	}
	$crypto_rand_secure = function ( $min, $max ) {
		$range = $max - $min;
		if ( $range < 0 ) return $min; // not so random...
		$log    = log( $range, 2 );
		$bytes  = (int) ( $log / 8 ) + 1; // length in bytes
		$bits   = (int) $log + 1; // length in bits
		$filter = (int) ( 1 << $bits ) - 1; // set all lower bits to 1
		do {
			$rnd = hexdec( bin2hex( openssl_random_pseudo_bytes( $bytes ) ) );
			$rnd = $rnd & $filter; // discard irrelevant bits
		} while ( $rnd >= $range );
		return $min + $rnd;
	};

	$token = "";
	$max   = strlen( $pool );
	for ( $i = 0; $i < $length; $i++ ) {
		$token .= $pool[$crypto_rand_secure( 0, $max )];
	}
	return $token;
}

function nycc_email_send_mandrill_email($to = array(), $from_addr, $from_name, $reply_to,$subject, $body, $attachments=array()) {
	//used to send an email directly using Mandrill API
	try {
		$mandrill = nycc_email_mandrill_get_api_object();
		$message = array(
			'html' => '<p>' . $body .'</p>',
			'subject' => $subject,
			'from_email' => $from_addr,
			'from_name' => $from_name,
			'to' =>$to,
			'headers' => array('Reply-To' => $reply_to),
			'track_opens' => true,
			'track_clicks' => true,
			'auto_text' => true,
			'auto_html' => true,
			'url_strip_qs' => true,
			'preserve_recipients' => true,
			'view_content_link' => true,
			'tracking_domain' => variable_get('nycc_email_group_domain_suffix', ''),
			'signing_domain' =>  variable_get('nycc_email_signing_domain', ''),
			'attachments' => $attachments			
		);
		watchdog('nycc_email', 'nycc_email_send_mandrill_email Message:<pre>' . print_r( $message, TRUE) . '</pre>');

		$result = $mandrill->messages_send($message);
		watchdog('nycc_email', 'nycc_email_send_mandrill_email Result:<pre>' . print_r( $result, TRUE) . '</pre>');

	} catch(Mandrill_Error $e) {
  		watchdog('nycc_email', "nycc_email_send_mandrill_email: Error: @class - @msg", 
  				array('@class'=>get_class($e), '@msg'=>$e->getMessage()), WATCHDOG_WARNING) ;
		throw $e;
	}								

}
function nycc_email_token_values($type, $object = NULL, $options = array()) {
	//returns a random strong for any object type.
   	$tokens = array();
   	$tokens['nycc_email_ride-auth-token'] = random_text('alnum', 60 );
	return $tokens;
}

function nycc_email_token_list($type = 'all') {
	//Function to expose tokens within views
  	$tokens = array();
  	$tokens['node']['nycc_email_ride-auth-token'] = t("A randomly 60 charachter string used to authenticate ride approval emails.");
  	return $tokens;
}


function nycc_email_views_api() {
  return array(
    'api' => 2.0,
  );  
}
